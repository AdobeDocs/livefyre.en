<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="c_building_an_auth_delegate">
 <title>AuthDelegate Object</title>
 <shortdesc>The <codeph>AuthDelegate</codeph> object implements your desired behavior for how to
    perform authentication actions and events so you can customize integration with your site’s
    existing authentication system.</shortdesc>
  <prolog>
    <metadata>
      <othermeta name="solution" content="Experience Manager"/>
    </metadata>
  </prolog>
 <conbody>
    <p>On this page:</p>
    <ul id="ul_yby_5w4_gcb">
      <li>
        <xref href="#c_building_an_auth_delegate/section_mpk_lv2_gz" format="dita"/>
      </li>
      <li>
        <xref href="#c_building_an_auth_delegate/section_uqz_2v2_gz" format="dita"/>
      </li>
      <li>
        <xref href="#c_building_an_auth_delegate/section_kkv_dv2_gz" format="dita"/>
      </li>
      <li>
        <xref href="#c_building_an_auth_delegate/section_bkx_pq2_gz" format="dita"/>
      </li>
    </ul>
  <section id="section_wmn_tv2_gz">
   <title>Building an Auth Delegate</title>
   <p>The auth package must be provided with an auth delegate before it can perform an action. An
    auth delegate is any JavaScript object that implements one of the methods in this topic.</p>
  </section>
  <section id="section_mpk_lv2_gz">
   <title>.login(finishLogin)</title>
   <p>Log in a valid user and invoke the finishLogin function with either an Error object if there
    was an error, or the user’s Livefyre credentials. Common implementations of this method redirect
    the user to a login page or open a new window or modal.</p>
   <p>This example automatically notifies auth of a Livefyre user with the authentication token,
    token:</p>
   <codeblock>authDelegate.login = function (finishLogin) {
 finishLogin(null, {
   livefyre: 'token'
 });
};</codeblock>
   <p>The simplest login delegate might ask the end-user for their Livefyre Authentication
    token.</p>
   <codeblock>authDelegate.login = function contrivedLogin(finishLogin) {
  var lfToken = prompt("Please type your Livefyre Token"); 
  if (lfToken.length === 0) {
   return finishLogin(new Error("User failed to type their lftoken"));
  } 
 finishLogin(null, {
   livefyre: lfToken
 });
};</codeblock>
  </section>
  <section id="section_uqz_2v2_gz">
   <title>.logout(finishLogout)</title>
   <p>Log out a user and invoke the finishLogout function with either an Error object if there was
    an error, or null to notify auth that the logout was successful.</p>
   <p>For example:</p>
   <codeblock>authDelegate.logout = function (finishLogout) {
 clearUserSession(); //logic to clear a user session 
 finishLogout(null);
}</codeblock>
  </section>
  <section id="section_kkv_dv2_gz">
   <title>.viewProfile(user)</title>
   <p>Take action to view a user’s profile.</p>
   <codeblock>authDelegate.viewProfile = function (user) {
 window.open(user.get('profileUrl'));
}</codeblock>
  </section>
  <section id="section_bkx_pq2_gz">
   <title>.editProfile(user)</title>
   <p>Take action to edit a user’s profile.</p>
   <codeblock>authDelegate.editProfile = function (user) {
 window.open(user.get('profileUrl') + '/edit/');
}</codeblock>
   <p>By implementing all of the methods listed above, auth can be configured with a custom auth
    delegate. Once a delegate has been constructed, it can be provided to auth using the delegate
    method.</p>
   <codeblock>var authDelegate = {
 login: function(cb) {
  ...
  cb(null);
 },
 ...
}
 
auth.delegate(authDelegate);</codeblock>
  </section>
 </conbody>
</concept>
