<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="c_creating_livefyre_tokens_c_">
 <title>Creating Livefyre Tokens C#</title>
 <shortdesc>Learn how to generate Livefyre tokens using the C# language. </shortdesc>
 <prolog>
  <metadata>
   <othermeta name="solution" content="Experience Manager"/>
  </metadata>
 </prolog>
 <conbody>
  <p>You can leverage legacy documentation and sample code to use C# .NET to write methods to create
   tokens.</p>
  <p>To reference Livefyre’s official libraries, use the <xref
    href="https://github.com/Livefyre/livefyre-java-utils" format="html" scope="external">Java
    Library</xref> as a starting point for C# developers.</p>
  <p>You may also consider using the <xref href="https://github.com/Livefyre/livefyre-nodejs-utils"
    format="html" scope="external">Node.js Library</xref> from the command line to generate
   reference tokens for yourself, and to get familiar with the method structure.</p>
  <ul id="ul_rh2_yll_wz">
   <li><xref href="https://gist.github.com/gibron/56cb9c7060bf4816c4c5#the-collectionMeta-token"
     format="html" scope="external">Jump to Collection Meta Token</xref></li>
   <li><xref href="https://gist.github.com/gibron/56cb9c7060bf4816c4c5#the-auth-token" format="html"
     scope="external">Jump to Auth Token</xref></li>
  </ul>
  <section id="section_c15_fnh_xz">
   <title>Dependencies</title>
   <ul id="ul_sh2_yll_wz">
    <li>You will need the <xref href="https://www.nuget.org/packages/JWT" format="html"
      scope="external">JWT nuget package</xref> in your project in order to generate the
     tokens.</li>
    <li>Code samples on this page use the <xref
      href="https://www.nuget.org/packages/newtonsoft.json/" format="html" scope="external"
      >Newtonsoft JSON</xref> package.</li>
   </ul>
  </section>
  <section id="section_dzt_4mh_xz">
   <title>CollectionMeta Token</title>
   <p>The CollectionMeta Token is passed to Livefyre when you embed Comments on a page, and provides
    our system with the necessary metadata for your new collection. In addition, you will create an
    MD5 <b>checksum</b> of this data, which Livefyre checks to see if the metadata has changed.
    (e.g. if the title or url of your article was edited).</p>
   <p>This token is signed with your <b>Site Key</b>, which was provided to you by your Techncial
    Account Manager at Livefyre.</p>
   <p>See also:</p>
   <ul id="ul_th2_yll_wz">
    <li>Official CollectionMeta Token Docs</li>
    <li><xref href="https://gist.github.com/pcolombo/dbbea020618c521a2bd5" format="html"
      scope="external">Example Gist</xref></li>
   </ul>
   <ol id="ol_uh2_yll_wz">
    <li>
     <p>Build a Dictonary containing the metadata for the collection. We’re only going to add some
      of the necessary fields in this step, becuase we want to create a checksum of this object
      BEFORE we add the articleId.</p>
     <p>
      <codeblock>    // Site Key provided by Livefyre
    string siteSecret = "ABCDE1234";
 
    var meta = new Dictionary&amp;lt;string, object&amp;gt;() {
        {"title", "Kings win the Stanley Cup"},
        {"url", "http://www.website.com/kings-win-stanley-cup"},
        {"tags", "sports, hockey, stanley_cup"},
        {"type", "livecomments"}
    };
 
</codeblock>
      <ul id="ul_wh2_yll_wz">
       <li><b>title:</b> (required) The title of the collection, typically the title of your
        article. Max length is 255 characters. Does not support html entities. Please encode special
        characters using UTF-8.</li>
       <li><b>url:</b> (required) The canonical url of your article. This is used by the comment
        sharing and social sync features, and links to your article from the Admin dashboard. If
        testing locally, please note that Livefyre will not accept ‘localhost’ as a domain.</li>
       <li><b>tags:</b> (optional) A comma-separated list of tags you would like to add to the
        collection in the Livefyre dashboard. Tags cannot contain spaces. Use underscores if you
        wish a space to appear in the Admin dashboard.</li>
       <li><b>type:</b> (optional) A string indicating what type of collection to create. Valid
        values are: <ul id="ul_wbg_xmh_xz">
         <li><codeph>reviews</codeph></li>
         <li><codeph>sidenotes</codeph></li>
         <li><codeph>ratings</codeph></li>
         <li><codeph>counting</codeph></li>
         <li><codeph>livecomments</codeph></li>
         <li><codeph>liveblog</codeph></li>
         <li><codeph>livechat</codeph></li>
        </ul>If not specified, a LiveComments collection is created by default.</li>
      </ul>
     </p>
    </li>
    <li>
     <p>JSON encode this dictionary, and generate an md5 checksum of it.</p>
     <codeblock>
    var metaStr = JsonConvert.SerializeObject(meta);
    byte[] hash;
 
    using (var md5 = MD5.Create())
    {
        hash = md5.ComputeHash(Encoding.UTF8.GetBytes(metaStr));
    }
 
    StringBuilder sBuilder = new StringBuilder();
 
    // Loop through each byte of the hashed data 
    // and format each one as a hexadecimal string 
    for (int i = 0; i &amp;lt; hash.Length; i++)
    {
        sBuilder.Append(hash[i].ToString("x2"));
    }
</codeblock>
    </li>
    <li>
     <p>Add the <b>articleId</b> to the Dictionary. The <b>checksum</b> does not go into the
      collectionMeta token, but should be sent as a seaprate parameter in the convConfig js
      object.</p>
     <p>
      <codeblock>    meta.Add("articleId", "article-abcde00001");
</codeblock>
      <ul id="ul_zh2_yll_wz">
       <li><b>articleId:</b> (required) A unique identifer for your collection within your Livefyre
        site. Typically, the unique articleId used in your CMS. (e.g. your WordPress post ID) This
        value should never change. Livefyre identifies unique collections by the combination of
        siteId and articleId.</li>
      </ul>
     </p>
    </li>
    <li>
     <p>Generate a signed JWT Token of the Dictionary, using the Site Key provided to you by
      Livefyre. Please note that you must specify the correct hash algorithm, as the JWT package
      does not use HS256 by default.</p>
     <codeblock>    string token = JWT.JsonWebToken.Encode(meta, siteSecret, JWT.JwtHashAlgorithm.HS256);</codeblock>
    </li>
   </ol>
  </section>
  <section id="section_g1d_43h_xz">
   <title>The User Auth Token</title>
   <p>The User Auth Token is used to sign a user into Livefyre. When a user signs into your site,
    the site generates a User Auth Token that is passed to the Livefyre widget on the page. (For
    more information on the authentication process see Remote Profiles.)</p>
   <p>This token requires your Network name (network.fyre.co), and is signed with your Network Key
    which is provided to you by your Technical Account Manager at Livefyre.</p>
   <p>See also:</p>
   <ul id="ul_b32_yll_wz">
    <li>Official Auth Token Docs</li>
    <li><xref href="https://gist.github.com/pcolombo/7d7403172c28734c87e2" format="html"
      scope="external">Example Gist</xref></li>
   </ul>
   <ol id="ol_wlf_w3h_xz">
    <li>
     <p>Build a Dictonary containing the necessary information.</p>
     <codeblock>    string networkKey = "ABCDEF1234";
 
    var payload = new Dictionary&amp;lt;string, object&amp;gt;() { 
            { "domain", "mynetwork.fyre.co" },
            { "user_id", "user-00001" },
            { "expires", DateTime.Now.AddDays(7).Ticks },
            { "display_name", "johndoe" }
        };
 </codeblock>
     <ul id="ul_e32_yll_wz">
      <li><b>domain:</b> The name of your network (provided by Livefyre.) e.g mynetwork.fyre.co</li>
      <li><b>user_id:</b> The unique user id for the user in your site’s profile system. Must be
       alphanumeric characters only (A-Z, a-z, 0-9). If your systems user id’s contain invalid
       charaacters, consider sending Livefyre an md5 hash of the user id, or a base64 encoded
       version of it. (Let your account manager know if you do this.)</li>
      <li><b>expires:</b> The date (in Epoch time) that the token expires. This should match the
       session time of logins on your site, so that Livefyre’s signed-in state stays in sync with
       your site’s signed-in state.</li>
      <li><b>display_name:</b> The user’s display name in your profile system, as it should be
       displayed in the comment stream.</li>
     </ul>
    </li>
    <li>
     <p>Generate a signed JWT Token of the Dictionary, using the Network Key provided to you by
      Livefyre. Please note that you must specify the correct hash algorithm, as the JWT package
      does not use HS256 by default.</p>
     <codeblock>
    string token = JWT.JsonWebToken.Encode(payload, networkKey, JWT.JwtHashAlgorithm.HS256);</codeblock>
    </li>
   </ol>
  </section>
 </conbody>
</concept>
