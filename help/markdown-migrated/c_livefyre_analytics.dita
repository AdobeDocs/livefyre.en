<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="c_livefyre_analytics">
    <title>Use Livefyre with Other Analytics Tool</title>
    <shortdesc></shortdesc>
    <prolog>
        <metadata>
            <othermeta name="solution" content="Experience Manager"/>
        </metadata>
    </prolog>
    <conbody>
        <p>You can use analytics tools to gather data on user interactions with Livefyre Apps. You
            can use Adobe Analytics or a tool of your choice. For information on how to use Adobe
            Analytics with Livefyre, see <xref href="#c_livefyre_analytics" format="dita"/>.</p>
        <section>To use Livefyre with a tool of your choice (not Adobe Analytics), follow the
            procedure outlined on this page.</section>
        <section id="section_ngm_gzl_pdb">
            <title>Step 1: Set up event handler</title>
            <p>Set up an event handler on pages where you use Livefyre Apps. This allows you to
                collect data from the Apps on that page that you can use for analytics.</p>
            <p>Add Livefyre.js to a page to set up the event handler. Livefyre.js loads
                asynchronously. To reduce file size and improve load performance, analytics are not
                available immediately. You must poll the analytics object until data is available.
                Place this script anywhere on the page or bundle it within your own compiled
                scripts</p>
            <codeblock>
/**
 * Handler for Livefyre analytics batch events.
 * @param {Array.&lt;string>} events Array of events that have been fired since
 *   the last batch send.
 */
function analyticsHandler(events) {
  // Send to analytics
  console.log(events);
}

var attempts = 0;

function pollForAnalytics() {
  if (Livefyre &amp;&amp; Livefyre.analytics) {
    Livefyre.analytics.addHandler(analyticsHandler);
    return;
  }
  if (attempts === 10) {
    return;
  }
  attempts++;
  setTimeout(pollForAnalytics, 500);
}

pollForAnalytics();
</codeblock>
        </section>
        <section>
            <title>Step 2: Implement handler function</title>
            <p>Once Livefyre.analytics functionality is available on the page, implement the
                analyticsHandler function to send the received events to the analytics provider of
                your choice.</p>
            <ol id="ol_rsx_p3n_pdb">
                <li>The analytics handler receives an array of events that must be iterated through
                    and sent individually or as a batch, if your provider supports it.</li>
                <li>Map the event data received by the handler to a format that your analytics
                    provider requires. You can see the list of analytics events and descriptions in
                        <xref
                        href="c_livefyre_analytics_events.dita#c_livefyre_analytics_events/table_n24_1kd_4cb"
                    />.</li>
                <li>Send the data to your analytics provider.</li>
            </ol>
        </section>
    </conbody>
</concept>
