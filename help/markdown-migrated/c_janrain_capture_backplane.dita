<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="c_janrain_capture_backplane">
 <title>Janrain Capture/Backplane</title>
 <shortdesc>Janrain Capture and Backplane sends successful log in and log out messages that a
  Livefyre App can use.</shortdesc>
 <conbody>
  
   <p>Janrain sends successful login/logout messages through the Backplane bus, on which the
    Livefyre App, when properly configured, listens. These messages contain all the information
    needed to show App users as logged in or logged out. Developers can view Backplane bus messages
    by inspecting the Network tab in your browser’s developer console.</p>
  
  <section id="section_ftt_tvp_mz">
   <title>Login</title>
   <p>Request:</p>
   <codeblock>https://backplane1.janrainbackplane.com//bus/{CUSTOMER_NAME}/channel/{CHANNEL}?callback=Backplane.response&amp;rnd=0.15930617856793106</codeblock>
   <p>Response:</p>
   <codeblock>Backplane.response([{
  "id": "2014-05-06T22:51:55.406Z-eZp1HB1F7B",
  "channel_name": "{CHANNEL_NAME}",
  "message": {
    "source": "http://{CUSTOMER_DOMAIN}",
    "type": "identity/login",
    "sticky": true,
    "payload": {
      "context": "http://{CUSTOMER_DOMAIN}",
      "identities": {
        "startIndex": 0,
        "itemsPerPage": 1,
        "totalResults": 1,
        "entry": {
          "id": "https://{CUSTOMER}.janraincapture.com/oauth/public_profile?uuid={UNIQUE_USER_ID}",
          "displayName": "{USER_DISPLAY_NAME}",
          "accounts": [
            {
              "username": "{USER_DISPLAY_NAME}",
              "identityUrl": "https://{CUSTOMER}.janraincapture.com/oauth/public_profile?uuid={UNIQUE_USER_ID}",
              "photos": [
                {
                  "id": 48570146,
                  "value": "https://lh3.googleusercontent.com/-h8poqH8hlgw/AAA/AAA1/QuHtbeHMJzc/photo.jpg?sz=50",
                  "type": "other"
                },
                {
                  "id": 48570147,
                  "value": "https://lh3.googleusercontent.com/-h8poqH8hlgw/AAA/AAA1/QuHtbeHMJzc/photo.jpg?sz=50",
                  "type": "original"
                },
                {
                  "id": 48570148,
                  "value": "https://lh3.googleusercontent.com/-h8poqH8hlgw/AAA/AAA1/QuHtbeHMJzc/photo.jpg?sz=50",
                  "type": "large"
                },
                {
                  "value": "https://lh3.googleusercontent.com/-h8poqH8hlgw/AAA/AAA1/QuHtbeHMJzc/photo.jpg?sz=50",
                  "type": "avatar"
                }
              ]
            },
            {
              "identityUrl": "{USER_PROFILE_LINK}"
            }
          ]
        }
      }
    }
  }
}
]);</codeblock>
   <p>Empty Response:</p>
   <codeblock>Backplane.response([]);</codeblock>
  </section>
  <section id="section_t52_svp_mz">
   <title>Logout</title>
   <p>Request:</p>
   <codeblock>https://backplane1.janrainbackplane.com/v1.2/bus/{CUSTOMER}/channel/new?callback=Backplane.finishInit&amp;amp;rnd=0.1057701709214598</codeblock>
   <p>Response:</p>
   <codeblock>Backplane.finishInit("{CHANNEL}");</codeblock>
   <p>If these messages are not appearing in your network requests, Livefyre will not be aware of
    the login/logout attempts and therefore, Livefyre won’t be able to integrate the user into the
    App.</p>
  </section>
    <section id="section_wng_zwt_bbb">
      <title>Integrate Livefyre with Janrain Capture or Backplane</title>
      <p>You can use Janrain Capture and Backplane with Livefyre Auth to allow users to engage with
        your Livefyre Apps when they log in to your site.</p>
      <p>Skip this section if you’re not using Janrain Capture.</p>
      <p>Customers using Janrain Capture and Backplane can use Livefyre Auth for Single Sign On
        (SSO), allowing users to immediately engage with your Livefyre Apps when they log in to your
        site. To benefit from this built-in Capture/Backplane integration, you must make
        configuration changes to both your Capture app and your Livefyre.js integration.</p>
      <p>For more information, see <xref
          href="http://developers.janrain.com/how-to/integrations/self-serve-integrations-and-tools/backplane-1-2/"
          format="html" scope="external">Janrain’s Backplane documentation</xref>.</p>
      <ol id="ol_qry_cxt_bbb">
        <li>Set Up Capture.</li>
        <li>(Optional) Add Livefyre Defaults to your Capture App.</li>
        <li>Build the AuthDelegate Object.</li>
        <li>Sync to Livefyre with Ping for Pull.</li>
      </ol>
    </section>
    <section id="section_r2f_kxt_bbb">
      <title>Set Up a Janrain Capture App</title>
      <p>Livefyre needs certain credentials from your Janrain Capture app.</p>
      <ol id="ol_ql4_lxt_bbb">
        <li>Set up the Janrain Capture app. </li>
        <li>Enter the following information for Livefyre:
            <!--HRK 4/7/17: where and how do I set this up?--><ul id="ul_ds1_czf_gz">
            <li>Access to your Janrain Capture instance.</li>
            <li>Access to your Janrain Engage dashboard.</li>
            <li>Your Capture settings and credentials.</li>
            <li>Your Engage credentials.</li>
            <li>Your identity URL.</li>
          </ul></li>
      </ol>
      <note>Livefyre receives data directly from the CNAME; therefore, this identity URL cannot be a
        CNAMEd record (a vanity URL CNAME) that resolves to the Janrain Capture’s actual
        CNAME.</note>
    </section>
    <section id="section_z2s_txt_bbb">
      <title>Add Livefyre Defaults to your Capture App</title>
      <p>Add Livefyre defaults to users stored in your Capture app to enable you to send users email
        notifications or allow them to automatically follow conversations that users comment on.</p>
      <ol id="ol_jpx_nyt_bbb">
        <li>Set up the Capture App. <!--HRK 4/7/17: need to link to "Set up Capture App."--></li>
        <li>Add the following Livefyre default fields. All fields are optional.</li>
      </ol>
      <table frame="all" rowsep="1" colsep="1" id="table_llk_wdr_mz">
        <tgroup cols="3">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <colspec colname="c3" colnum="3" colwidth="1.0*"/>
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Type</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><uicontrol>livefyre_comments</uicontrol></entry>
              <entry>String </entry>
              <entry>Notify user when someone comments on an article that they’re following. Can be
                immediately, often, or never.</entry>
            </row>
            <row>
              <entry><uicontrol>livefyre_likes</uicontrol></entry>
              <entry>String </entry>
              <entry>Notify user when someone likes one of their posts. Can be immediately, often,
                or never.</entry>
            </row>
            <row>
              <entry><uicontrol>livefyre_replies</uicontrol></entry>
              <entry>String</entry>
              <entry>Notify user when someone replies to one of their posts.Can be immediately,
                often, or never.</entry>
            </row>
            <row>
              <entry><uicontrol>livefyre_moderator_comments</uicontrol></entry>
              <entry>String</entry>
              <entry>Notify moderator when someone comments on a conversation that they’re
                moderating.Can be immediately, often, or never.</entry>
            </row>
            <row>
              <entry><uicontrol>livefyre_moderator_flags</uicontrol></entry>
              <entry>String </entry>
              <entry>Notify moderator when someone flags a post on a conversation that they’re
                moderating.Can be immediately, often, or never.</entry>
            </row>
            <row>
              <entry><uicontrol>livefyre_autofollow_conversations</uicontrol></entry>
              <entry>Boolean </entry>
              <entry>Have the user auto-follow a conversation when they leave a post. Can be true or
                false.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="section_asv_vyt_bbb">
      <title>Connecting Janrain to Livefyre using AuthDelegate</title>
      <p>Livefyre.require provides a plugin that enables auth to listen to the Janrain Backplane
        bus.</p>
      <p> When an identity/login message is broadcast on the Backplane channel, auth.authenticate()
        will be called for you with the user’s Livefyre Authentication token. You must still
        implement an AuthDelegate.</p>
      <codeblock>
Livefyre.require(['auth', 'backplane-auth-plugin#0'], function(auth, backplanePluginFactory) {
   auth.plugin(backplanePluginFactory('network.fyre.co'));
   auth.delegate({
      login: function (finishLogin) {
         loginWithCapture(finishLogin);
      }
   });
});</codeblock>
      <note>The window.Backplane object must be defined on your page before calling auth.plugin with
        the Livefyre Backplane plugin. To make sure the Backplane object is available, call the
        Livefyre instantiation code from an onReady callback. Consult your Janrain contact to
        determine when other applications may use the Backplane object.</note>
      <p>The following are some examples of how an auth delegate may look for a Janrain Capture
        integration. </p>
      <note>Your auth delegate will vary depending upon your Janrain instance.</note>
      <ul id="ul_gqf_htz_pz">
        <li>
          <p><cmdname>Login</cmdname></p>
          <ul id="ul_d4x_3tz_pz">
            <li><cmdname>errback:</cmdname> The callback passed to your auth delegate’s login
              method</li>
            <li><cmdname>janrain:</cmdname> The reference to your Janrain capture variable.</li>
            <li><cmdname>window.Backplane</cmdname>: A reference to your Backplane object.</li>
          </ul>
        </li>
      </ul>
      <codeblock>/**
* Login function
* In this case, opens a login modal and triggers Backplane to start listening
* for login messages
*/
authDelegate.login = function(finishLogin) {
   var successCallback = function() {
      // These need to be replaced with the actions that correspond to successful login 
      // and when the Janrain modal is closed.
      janrain.events.onCaptureLoginSuccess.removeHandler(successCallback);
      janrain.events.onModalClose.removeHandler(failureCallback);
      finishLogin();
   };
 
   var failureCallback = function(e) {
      janrain.events.onModalClose.removeHandler(failureCallback);
      janrain.events.onCaptureLoginSuccess.removeHandler(successCallback);
      finishLogin(e || new Error("Error logging in with Janrain Capture"));
   };
 
   // Open the modal to log a user in
   janrain.capture.ui.renderScreen('signIn');
   // Send a backplane message
   window.Backplane.expectMessages('identity/login');
   // Add handlers to specific janrain events
   janrain.events.onCaptureLoginSuccess.addHandler(successCallback);
   janrain.events.onModalClose.addHandler(failureCallback);
};</codeblock>
      <p>Logout</p>
      <dl>
        <dlentry>
          <dt>finishLogout:</dt>
          <dd>The callback passed to your auth delegate’s login method.</dd>
        </dlentry>
        <dlentry>
          <dt>window.Backplane:</dt>
          <dd>A reference to your Backplane object.</dd>
        </dlentry>
      </dl>
      <codeblock>/**
* Logout function
* In this case, invalidates the session and removes the cookie.
* Also reloads the page to change state. In order to do this without a reload,
* it would be necessary to also update the UI.
*/
authDelegate.logout = function(finishLogout) {
   Backplane.resetCookieChannel();
   janrain.capture.ui.endCaptureSession();
   finishLogout();
};
</codeblock>
      <p>Edit Profile</p>
      <p>This can link to whatever part of the site you would like users to visit to view their own
        profile page. This example merely prints out the author object passed in.</p>
      <codeblock>/**
* Edit profile function
* @param user - User who would like to edit their profile
*/
authDelegate.editProfile = function(user) {
   console.log(user);
};
</codeblock>
      <p>View Profile</p>
      <p>Like Edit Profile, this should link to a user’s page that is different from the currently
        logged in user. This can be implemented however you see fit. This example simply logs the
        author parameter to the console.</p>
      <codeblock>/**
* View profile function
* @param user - User or userId whose profile should be displayed
*/
authDelegate.viewProfile = function(user) {
   console.log(author);
};</codeblock>
    </section>
    <section id="section_ilv_bzt_bbb">
      <title>Sync to Livefyre with Ping for Pull</title>
      <p><b>Step 4: Sync to Livefyre with Ping for Pull</b></p>
      <p>Keeping Livefyre Remote Profiles in sync with your Capture user management system involves
        a series of steps referred to as Ping for Pull. This process requires that you obtain a
        valid access token from Janrain, and then pass that token to an endpoint specified in step
        3, below.</p>
      <ol id="ol_hgy_2zt_bbb">
        <li>
          <p>Get an access code from Janrain. </p>
          <p>To get the access code, supply the necessary credentials, specify the user_type as
            “user”, and the uuid as the current user’s uuid to update. For more information, see
              <xref
              href="http://developers.janrain.com/rest-api/methods/authentication/access-codes-and-tokens/getauthorizationcode/"
              format="html" scope="external"
              >http://developers.janrain.com/rest-api/methods/authentication/access-codes-and-tokens/getauthorizationcode/.</xref></p>
        </li>
        <li>
          <p>Trade the access code for an access token. Supply the necessary credentials, the access
            code received from step 1, and specify the grant_type as “authorization_code”.</p>
          <p>For more information, see <xref
              href="http://developers.janrain.com/rest-api/methods/authentication/oauth/token/"
              format="html" scope="external"
              >http://developers.janrain.com/rest-api/methods/authentication/oauth/token/</xref></p>
        </li>
        <li>
          <p>Hit the Livefyre “Ping to Pull Capture” endpoint. </p>
          <p>Endpoint URL:
              <filepath>http://{networkName}/api/v1.1/private/capture/profile_updated/?jrtoken={token}</filepath>
            where <i><b>{networkName}</b></i> is the network name provided to you by Livefyre, and
            the jrtoken is the token received from Janrain in step 2. </p>
          <p>Once you hit this endpoint, you receive a 202 response and Livefyre begins an async
            process.</p>
        </li>
      </ol>
    </section>
 </conbody>
</concept>
